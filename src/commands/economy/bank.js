const { ApplicationCommandOptionType } = require("discord.js");
const balance = require("./sub/balance");
const deposit = require("./sub/deposit");
const transfer = require("./sub/transfer");
const withdraw = require("./sub/withdraw");

/**
 * @type {import("@structures/Command")}
 */
module.exports = {
  name: "bank",
  description: "–º–∏–ª—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–Ω–∫–æ–º",
  category: "ECONOMY",
  botPermissions: ["EmbedLinks"],
  command: {
    enabled: true,
    minArgsCount: 1,
    subcommands: [
      {
        trigger: "balance",
        description: "—É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç–æ—á–µ–∫ —É —Ç–µ–±—è –µ—Å—Ç—å",
      },
      {
        trigger: "deposit <coins>",
        description: "–ø–æ–ª–æ–∂–∏—Ç—å –º–æ–Ω–µ—Ç–∫–∏ –Ω–∞ —Å–≤–æ–π —É—é—Ç–Ω—ã–π —Å—á–µ—Ç–∏–∫",
      },
      {
        trigger: "withdraw <coins>",
        description: "–∑–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç–∫–∏ —Å –ª—é–±–∏–º–æ–≥–æ —Å—á–µ—Ç–∏–∫–∞",
      },
      {
        trigger: "transfer <user> <coins>",
        description: "–ø–æ–¥–∞—Ä–∏—Ç—å –º–æ–Ω–µ—Ç–æ—á–∫–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é üíñ",
      },
    ],
  },
  slashCommand: {
    enabled: true,
    options: [
      {
        name: "alance",
        description: "—É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –º–æ–Ω–µ—Ç–æ—á–µ–∫",
        type: ApplicationCommandOptionType.Subcommand,
        options: [
          {
            name: "user",
            description: "–∫–æ–º—É –ø—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å?",
            type: ApplicationCommandOptionType.User,
            required: false,
          },
        ],
      },
      {
        name: "deposit",
        description: "–ø–æ–ª–æ–∂–∏—Ç—å –º–æ–Ω–µ—Ç–æ—á–∫–∏ –≤ –±–∞–Ω–∫",
        type: ApplicationCommandOptionType.Subcommand,
        options: [
          {
            name: "coins",
            description: "—Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç–æ—á–µ–∫ –ø–æ–ª–æ–∂–∏–º?",
            type: ApplicationCommandOptionType.Integer,
            required: true,
          },
        ],
      },
      {
        name: "withdraw",
        description: "–∑–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç–æ—á–∫–∏ –∏–∑ –±–∞–Ω–∫–∞",
        type: ApplicationCommandOptionType.Subcommand,
        options: [
          {
            name: "coins",
            description: "—Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç–æ—á–µ–∫ –∑–∞–±–∏—Ä–∞–µ–º?",
            type: ApplicationCommandOptionType.Integer,
            required: true,
          },
        ],
      },
      {
        name: "transfer",
        description: "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç–∫–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
        type: ApplicationCommandOptionType.Subcommand,
        options: [
          {
            name: "user",
            description: "–∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç–æ—á–∫–∏?",
            type: ApplicationCommandOptionType.User,
            required: true,
          },
          {
            name: "coins",
            description: "—Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç–æ—á–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏–º?",
            type: ApplicationCommandOptionType.Integer,
            required: true,
          },
        ],
      },
    ],
  },

  async messageRun(message, args) {
    const sub = args[0];
    let response;

    if (sub === "balance") {
      const resolved = (await message.guild.resolveMember(args[1])) || message.member;
      response = await balance(resolved.user);
    }

    //
    else if (sub === "deposit") {
      const coins = args.length && parseInt(args[1]);
      if (isNaN(coins)) return message.safeReply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ –º–æ–Ω–µ—Ç–æ—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª–æ–∂–∏—Ç—å.");
      response = await deposit(message.author, coins);
    }

    //
    else if (sub === "withdraw") {
      const coins = args.length && parseInt(args[1]);
      if (isNaN(coins)) return message.safeReply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ –º–æ–Ω–µ—Ç–æ—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–±—Ä–∞—Ç—å.");
      response = await withdraw(message.author, coins);
    }

    //
    else if (sub === "transfer") {
      if (args.length < 3) return message.safeReply("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–æ–Ω–µ—Ç–æ—á–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.");
      const target = await message.guild.resolveMember(args[1], true);
      if (!target) return message.safeReply("–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ–≥–æ, –∫–æ–º—É –ø–µ—Ä–µ–≤–µ–¥–µ–º –º–æ–Ω–µ—Ç–∫–∏.");
      const coins = parseInt(args[2]);
      if (isNaN(coins)) return message.safeReply("–°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç–æ—á–µ–∫ —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?");
      response = await transfer(message.author, target.user, coins);
    }

    //
    else {
      return message.safeReply("–û–π, —è –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.");
    }

    await message.safeReply(response);
  },

  async interactionRun(interaction) {
    const sub = interaction.options.getSubcommand();
    let response;

    // balance
    if (sub === "balance") {
      const user = interaction.options.getUser("user") || interaction.user;
      response = await balance(user);
    }

    // deposit
    else if (sub === "deposit") {
      const coins = interaction.options.getInteger("coins");
      response = await deposit(interaction.user, coins);
    }

    // withdraw
    else if (sub === "withdraw") {
      const coins = interaction.options.getInteger("coins");
      response = await withdraw(interaction.user, coins);
    }

    // transfer
    else if (sub === "transfer") {
      const user = interaction.options.getUser("user");
      const coins = interaction.options.getInteger("coins");
      response = await transfer(interaction.user, user, coins);
    }

    await interaction.followUp(response);
  },
};
  