require("dotenv").config(); // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è .env
const fs = require("fs");
const path = require("path");
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const axios = require("axios"); // –î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ HTTP-–∑–∞–ø–∏—Ç–∞–º–∏

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤ —Ñ–∞–π–ª
function logToFile(message) {
  const logsDir = path.join(__dirname, "logs");
  if (!fs.existsSync(logsDir)) {
    fs.mkdirSync(logsDir);
  }

  const logFile = path.join(logsDir, "meme_command_logs.txt");
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}\n`;
  fs.appendFileSync(logFile, logMessage, "utf8");
}

module.exports = {
  name: "meme",
  description: "–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º",
  category: "FUN",
  botPermissions: ["EmbedLinks"],
  cooldown: 20,
  command: {
    enabled: true,
    usage: "",
  },
  slashCommand: {
    enabled: true,
    options: [],
  },

  async messageRun(message) {
    console.log("–û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—É –∫–æ–º–∞–Ω–¥—É: meme");
    logToFile("–û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—É –∫–æ–º–∞–Ω–¥—É: meme");
    await handleMemeRequest(message);
  },

  async interactionRun(interaction) {
    console.log("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥—É: meme");
    logToFile("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥—É: meme");
    await handleMemeRequest(interaction);
  },
};

async function handleMemeRequest(context) {
  console.log("–ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É –Ω–∞ –º–µ–º–∏");
  logToFile("–ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É –Ω–∞ –º–µ–º–∏");
  const buttonRow = new ActionRowBuilder().addComponents(
    new ButtonBuilder().setCustomId("regenMemeBtn").setStyle(ButtonStyle.Secondary).setEmoji("üîÅ")
  );

  const embed = await fetchMemeEmbed();

  try {
    const sentMsg = await context.reply({
      embeds: [embed],
      components: [buttonRow],
      fetchReply: true,
    });
    console.log("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–º–æ–º —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ");
    logToFile("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–º–æ–º —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ");

    const collector = sentMsg.createMessageComponentCollector({
      filter: (i) => i.user.id === context.user?.id || context.author?.id,
      time: 20000, // 20 —Å–µ–∫—É–Ω–¥
    });

    collector.on("collect", async (interaction) => {
      console.log("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–º—É");
      logToFile("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–º—É");
      if (interaction.customId !== "regenMemeBtn") return;

      await interaction.deferUpdate();
      const newEmbed = await fetchMemeEmbed();
      await sentMsg.edit({ embeds: [newEmbed], components: [buttonRow] });
      console.log("–ú–µ–º —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ");
      logToFile("–ú–µ–º —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ");
    });

    collector.on("end", () => {
      console.log("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–±—ñ—Ä –≤–∑–∞—î–º–æ–¥—ñ–π –∑ –∫–Ω–æ–ø–∫–æ—é");
      logToFile("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–±—ñ—Ä –≤–∑–∞—î–º–æ–¥—ñ–π –∑ –∫–Ω–æ–ø–∫–æ—é");
      buttonRow.components.forEach((button) => button.setDisabled(true));
      sentMsg.edit({ components: [buttonRow] });
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∞–±–æ –æ–±—Ä–æ–±–∫–∏ –º–µ–º—É:", error);
    logToFile(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∞–±–æ –æ–±—Ä–æ–±–∫–∏ –º–µ–º—É: ${error.message}`);
  }
}

async function fetchMemeEmbed() {
  console.log("–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–º—É –∑ Meme API");
  logToFile("–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–º—É –∑ Meme API");
  try {
    const response = await axios.get("https://meme-api.com/gimme");
    const meme = response.data;

    console.log("–ú–µ–º —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ:", meme);
    logToFile(`–ú–µ–º —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ: ${JSON.stringify(meme)}`);

    return new EmbedBuilder()
      .setTitle(meme.title)
      .setURL(meme.postLink)
      .setImage(meme.url)
      .setColor("Random")
      .setFooter({ text: `üëç ${meme.ups} | üí¨ ${meme.comments}` });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–º—É:", error);
    logToFile(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–º—É: ${error.message}`);
    return new EmbedBuilder()
      .setColor("Red")
      .setDescription("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–º—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!");
  }
}
